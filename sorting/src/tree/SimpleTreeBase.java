package tree;

/**
 * @author hankin
 * @date 2020/7/20 18:57
 */
public class SimpleTreeBase {
    /**
     *
     * 节点(Node)：tree的element
     * 父子关系: Node - Node 的边
     * son tree: Node数量>1时候，Node分为互不相交的集合 叫做子树（son tree）
     * 度：一个Node拥有的子树数量
     * 叶子: 度为0的节点
     * son:节点的子树的根
     * parent:与孩子结点相对应
     * 兄弟: 同一双亲节点
     * 森林：由N个不相交的树构成
     *
     * */

    /**
     *                 高度      深度     层
     *           O      3        0       1
     *         /  \
     *        O   O     2        1       2
     *       /\  /
     *      O O O       1        2       3
     *       /  \
     *      O   O       0        3       4
     *
     * Node高度：Node->叶子的最长路径
     * Node深度：根Node->该结点的边个数
     * Node层数：Node深度+1
     * tree高度：root Node的高度
     *
     */

    /**
     *
     * 满二叉树：除了叶子节点外 每个节点都有2个子节点
     *        O
     *      /  \
     *     O    O
     *    / \  / \
     *   O  O O  O
     *
     *
     * 完全二叉树:除了最后一层外 其他节点个数必须最大 并且最后一层结点连续靠左排列
     * 完全二叉树可以基于数组亦可以基于链表,因为基于数组所以衍生出完全二叉树这个概念
     *        O     ---A
     *      /  \
     *     O    O   ---B C
     *    / \  /
     *   O  O O     ---D E F
     *
     * -----------------------------------
     * |   | A  | B  | C  | D  | E  | F  |      A:i=1,A左节点：2*i A右节点：2*i+1
     * -----------------------------------
     * -----------------------------------
     * | 0 | 1  | 2  | 3  | 4  | 5  | 6  |
     * -----------------------------------
     *
     * 二叉树:
     *
     *        O
     *      /  \
     *     O    O
     *    / \    \
     *   O  O    O
     * -----------------------------------
     * |   | A  | B  | C  | D  |    | F  |      A:i=1,A左节点：2*i A右节点：2*i+1
     * -----------------------------------
     * -----------------------------------
     * | 0 | 1  | 2  | 3  | 4  | 5  | 6  |      用数组存储的话 会空出一个空间
     * -----------------------------------
     *
     */
}
